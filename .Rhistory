install.packages("RPostgreSQL")
install.packages('DBI')
library(postgresql)
library(postgresql)
library('RPostgreSQL')
library("RPostgreSQL")
drv <- dbDriver("PostgreSQL")
con <- dbConnect(drv, dbname="tempdb")
con <- con <- dbConnect(drv, dbname="d9p6btpmrjint3",host="ec2-23-23-181-213.compute-1.amazonaws.com",port=5442,user="u5sqv336tafm7j",password="p1f9fcen1vq4etep043kk0mn85t", )
drv <- dbDriver("PostgreSQL")
conn <- dbConnect(drv, dbname="d9p6btpmrjint3",host="ec2-23-23-181-213.compute-1.amazonaws.com",port=5442,user="u5sqv336tafm7j",password="p1f9fcen1vq4etep043kk0mn85t", )
conn <- dbConnect(drv, dbname="d9p6btpmrjint3",host="ec2-23-23-181-213.compute-1.amazonaws.com",port=5442,user="u5sqv336tafm7j",password="p1f9fcen1vq4etep043kk0mn85t")
dbListConnections
options(sqldf.RPostgreSQL.user="u5sqv336tafm7j",
sqldf.RPostgreSQL.password="p1f9fcen1vq4etep043kk0mn85t",
sqldf.RPostgreSQL.dbname="d9p6btpmrjint3",
sqldf.RPostgreSQL.host="ec2-23-23-181-213.compute-1.amazonaws.com",
sqldf.RPostgreSQL.port=5442)
dbListConnections
install.packages("sqldf")
zones <- sqldf("select * from zones WHERE active = TRUE")
library("sqldf")
zones <- sqldf("select * from zones WHERE active = TRUE")
zones
query <- """
SELECT
*
FROM
zones
WHERE
active = TRUE
"""
zones <- sqldf(query)
query <- '''
SELECT
*
FROM
zones
WHERE
active = TRUE
'''
query <- "
SELECT
*
FROM
zones
WHERE
active = TRUE
"
zones <- sqldf(query)
zones <- sqldf(query)
zones
q()
library("RPostgreSQL")
library("sqldf")
drv <- dbDriver("PostgreSQL")
# ETL
conn <- dbConnect(drv,
dbname="dev",
host="spoonrocket-redshift.cja7ztdqfcdf.us-west-2.redshift.amazonaws.com",
port=5439,
user="spoonrocket",
password="tefyX7Pl")
options(sqldf.RPostgreSQL.user="spoonrocket",
sqldf.RPostgreSQL.password="tefyX7Pl",
sqldf.RPostgreSQL.dbname="dev",
sqldf.RPostgreSQL.host="spoonrocket-redshift.cja7ztdqfcdf.us-west-2.redshift.amazonaws.com",
sqldf.RPostgreSQL.port=5439)
driver_session_id <- 25292
query <- paste("
SELECT
lat
, lng
, MIN(CONVERT_TIMEZONE('US/Pacific',created_at) AS created_at
FROM
driver_session_locations
WHERE
driver_session_id = ",driver_session_id,"
GROUP BY
lat, lng
ORDER BY
created_at
", sep="")
gps <- sqldf(query)
driver_session_id <- 25292
query <- paste("
SELECT
lat
, lng
, MIN(CONVERT_TIMEZONE('US/Pacific',created_at)) AS created_at
FROM
driver_session_locations
WHERE
driver_session_id = ",driver_session_id,"
GROUP BY
lat, lng
ORDER BY
created_at
", sep="")
gps <- sqldf(query)
library(dplyr)
# Download .zip file and extract contents
destfile <- "./getdata-projectfiles-UCI HAR Dataset.zip"
if (!file.exists(destfile)) {
download.file("https://d396qusza40orc.cloudfront.net/getdata%2Fprojectfiles%2FUCI%20HAR%20Dataset.zip", destfile=destfile, method="curl")
}
features <- read.table(unzip(destfile, files="UCI HAR Dataset/features.txt", exdir=".", overwrite=TRUE), sep=" ")
activity_labels <- read.table(unzip(destfile, files="UCI HAR Dataset/activity_labels.txt", exdir=".", overwrite=TRUE), sep=" ")
train_subject <- read.table(unzip(destfile, files="UCI HAR Dataset/train/subject_train.txt", exdir=".", overwrite=TRUE), sep=" ")
train_X <- read.table(unzip(destfile, files="UCI HAR Dataset/train/X_train.txt", exdir=".", overwrite=TRUE))
train_y <- read.table(unzip(destfile, files="UCI HAR Dataset/train/y_train.txt", exdir=".", overwrite=TRUE), sep=" ")
test_subject <- read.table(unzip(destfile, files="UCI HAR Dataset/test/subject_test.txt", exdir=".", overwrite=TRUE), sep=" ")
test_X <- read.table(unzip(destfile, files="UCI HAR Dataset/test/X_test.txt", exdir=".", overwrite=TRUE))
test_y <- read.table(unzip(destfile, files="UCI HAR Dataset/test/y_test.txt", exdir=".", overwrite=TRUE), sep=" ")
# Combine train and test sets
subject <- bind_rows(train_subject, test_subject)
y <- bind_rows(train_y, test_y)
X <- bind_rows(train_X, test_X)
# Add descriptive variable names
names(subject) <- "subject"
names(y) <- "activityId"
names(X) <- features$V2
# Extract only measurements on the mean and standard deviation for each measurement
X <- X[!duplicated(features$V2)]
X <- bind_cols(select(X, contains("-mean()")), select(X, contains("-std()")))
# Add descriptive activity names
names(activity_labels) <- c("activityId","activity")
y2 <- left_join(y, activity_labels, by="activityId")
# Combine all datasets into single dataframe
all <- bind_cols(subject, y2, X) %>%
select(-activityId)
# Create tidy dataset with the average of each variable for each activity and each subject
tidy <- group_by(all, subject, activity) %>%
arrange(subject, activity) %>%
summarise_each(funs(mean))
# Export tidy dataset
write.csv(tidy, file="tidy.txt", row.names=FALSE)
write.csv(tidy, file="tidy.csv", row.names=FALSE)
setwd("coursera/devdataprod-012/")
getwd()
library(slidify)
author("DevDataProd_Project2")
slidify("index.Rmd")
browseURL("index.html")
slidify("index.Rmd")
browseURL("index.html")
slidify("index.Rmd")
browseURL("index.html")
slidify("index.Rmd")
browseURL("index.html")
slidify("index.Rmd")
browseURL("index.html")
library(datasets)
dim(mtcars)
mtcars
slidify("index.Rmd")
browseURL("index.html")
browseURL("index.html")
slidify("index.Rmd")
browseURL("index.html")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
browseURL("index.html")
slidify("index.Rmd")
slidify("index.Rmd")
browseURL("index.html")
browseURL("index.html")
slidify("index.Rmd")
slidify("index.Rmd")
browseURL("index.html")
slidify("index.Rmd")
browseURL("index.html")
browseURL("index.html")
slidify("index.Rmd")
browseURL("index.html")
slidify("index.Rmd")
browseURL("index.html")
